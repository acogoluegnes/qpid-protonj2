/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.qpid.protonj2.types.transport;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

public class OpenTest {

    @Test
    public void testGetPerformativeType() {
        assertEquals(Performative.PerformativeType.OPEN, new Open().getPerformativeType());
    }

    @Test
    public void testToStringOnFreshInstance() {
        assertNotNull(new Open().toString());
    }

    @Test
    public void testInitialState() {
        Open open = new Open();

        assertEquals(1, open.getElementCount());
        assertFalse(open.isEmpty());
        assertFalse(open.hasChannelMax());
        assertTrue(open.hasContainerId());
        assertFalse(open.hasDesiredCapabilites());
        assertFalse(open.hasHostname());
        assertFalse(open.hasIdleTimeout());
        assertFalse(open.hasIncomingLocales());
        assertFalse(open.hasMaxFrameSize());
        assertFalse(open.hasOfferedCapabilites());
        assertFalse(open.hasOutgoingLocales());
        assertFalse(open.hasProperties());
    }

    @Test
    public void testCopyFromNew() {
        Open original = new Open();
        Open copy = original.copy();

        assertFalse(original.isEmpty());
        assertFalse(copy.isEmpty());

        assertEquals(1, original.getElementCount());
        assertEquals(1, copy.getElementCount());
    }
}
